#!/usr/bin/env python3
# Copyright 2020 Sebastian Wiesner <sebastian@swsnr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.


import sys
import os
import termios
import tty
import re
from contextlib import contextmanager
from functools import partial
from argparse import ArgumentParser


@contextmanager
def raw(filelike):
    attrs = termios.tcgetattr(filelike)
    try:
        tty.setraw(filelike, when=termios.TCSANOW)
        yield
    finally:
        termios.tcsetattr(filelike, termios.TCSANOW, attrs)


def read_background_colour(tty):
    with open(tty, 'wb', buffering=0) as sink:
        with raw(sink):
            sink.write(b'\033]11;?\007')
            sink.flush()
            with open(tty, 'rb', buffering=0) as source:
                answer = b''.join(list(iter(partial(source.read, 1), b'\007')))

    return answer.removeprefix(b'\033]11;')


def luminance(r, g, b):
    # Derive luminance from RGB, as per ITU-R BT.709, 3 Signal format, item 3.2
    return r * 0.2126 + g * 0.7152 + b * 0.0722


def theme(r, g, b):
    return 'light' if 128 < luminance(r, g, b) else 'dark'


def main():
    parser = ArgumentParser()
    parser.add_argument('-t', '--theme', action='store_true')

    args = parser.parse_args()

    term = os.environ.get('TERM', '')
    if 'xterm' not in term.lower():
        print(f'Not an xterm: {term}', file=sys.stderr)
        sys.exit(1)
    colour = read_background_colour(os.ctermid())

    if args.theme:
        match = re.search(
            b'^rgb:([^/]{2})[^/]*/([^/]{2})[^/]*/([^/]{2})[^/]*$', colour)
        if not match:
            print(f'Failed to parse color from {colour}', file=sys.stderr)
            sys.exit(1)
        r, g, b = match.groups()
        print(theme(int(r, 16), int(g, 16), int(b, 16)))
    else:
        sys.stdout.buffer.write(colour)
        sys.stdout.buffer.write(b'\n')


if __name__ == '__main__':
    main()
