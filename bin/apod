#!/usr/bin/env python3
# Copyright 2019 Sebastian Wiesner <sebastian@swsnr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import json
import sys
from argparse import ArgumentParser
from datetime import date
from pathlib import Path
from platform import system
from subprocess import run, Popen, DEVNULL
from textwrap import fill


def open_file(path):
    cmds = {
        'Darwin': ['open', str(path)],
        'Linux': ['xdg-open', str(path)]
    }
    return Popen(cmds[system()], stdout=DEVNULL, stderr=DEVNULL)


def get_pictures_directory():
    if system() == 'Darwin':
        return Path.home() / 'Pictures'
    else:
        process = run(['xdg-user-dir', 'PICTURES'],
                      check=True, capture_output=True, encoding='utf-8')
        return Path(process.stdout.splitlines()[0])


def get_default_directory():
    return get_pictures_directory() / 'APOD'


def lookup_api_key():
    cmds = {
        'Darwin': [
            'security', 'find-internet-password', '-C', 'apky', '-s',
            'api.nasa.gov', '-r', 'htps', '-w'
        ],
        'Linux': [
            'secret-tool', 'lookup',
            'server', 'api.nasa.gov', 'kind', 'api-key']
    }
    process = run(cmds[system()], check=True,
                  capture_output=True, encoding='utf-8')
    return process.stdout.rstrip()


class APODError(Exception):
    def __init__(self, code, message, response):
        super().__init__(code, message, response)

    @property
    def code(self):
        return self.args[0]

    @property
    def message(self):
        return self.args[1]

    def __str__(self):
        return '{} (code {})'.format(self.message, self.code)


def get_info(api_key, date):
    url = "https://api.nasa.gov/planetary/apod?api_key={}&date={}&hd=True".format(
        api_key, date.isoformat())
    process = run(['curl', '-sS', url], check=True, capture_output=True)
    info = json.loads(process.stdout.strip())
    if info.get('code'):
        raise APODError(info['code'], info['msg'], info)
    elif 'error' in info:
        raise APODError(info['error']['code'], info['error']['message'], info)
    else:
        return info


def image_exists(directory, date):
    pattern = '{}-'.format(date.isoformat())
    return any(e.name.startswith(pattern) for e in directory.iterdir())


def download_image(directory, image_info):
    if image_info['media_type'] != 'image':
        raise ValueError('Media type {} not supported'.format(
            image_info['media_type']))
    url = image_info.get('hdurl', image_info['url'])
    basename = url.split('/')[-1]
    filename = '{}-{}'.format(image_info['date'], basename)
    target = directory / filename
    run(['curl', '-sSf', '-o', str(target), url], check=True)
    info = """\
# {}

Copyright {}

{}
""".format(image_info['title'],
           image_info.get('copyright', 'NASA Public Domain'),
           fill(image_info['explanation'], width=80, break_long_words=False))
    meta_target = target.with_suffix('.md')
    meta_target.write_text(info, encoding='utf-8')
    print('APOD written to {}'.format(target))
    return (target, meta_target)


def main():
    parser = ArgumentParser(description='Download APOD images')
    parser.add_argument('--api-key', help='API key')
    parser.add_argument('--directory', help='Target directory', type=Path)
    parser.add_argument('date', metavar='YYYY-MM-DD', help='Date to download',
                        type=date.fromisoformat, nargs='?', default=date.today())
    parser.add_argument('-o', '--open', help='Open after downloading',
                        action='store_true')
    args = parser.parse_args()
    if not args.api_key:
        args.api_key = lookup_api_key()
    if not args.directory:
        args.directory = get_default_directory()

    if image_exists(args.directory, args.date):
        print('APOD {} already exists in {}'.format(args.date, args.directory))
        return

    try:
        info = get_info(args.api_key, args.date)
        (image, _) = download_image(args.directory, info)
        if args.open:
            open_file(image)
    except APODError as error:
        sys.exit('APOD error: {}'.format(error))
    except ValueError as error:
        sys.exit('Error: {}'.format(error))
    except KeyboardInterrupt:
        pass


if __name__ == '__main__':
    main()
