#!/usr/bin/env python3
# Copyright 2019 Sebastian Wiesner <sebastian@swsnr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.


import os
import sys
import xml.etree.ElementTree as etree
import subprocess
import json
from time import time
from pathlib import Path
from collections import Counter, namedtuple
from gi.repository import Gio


# TODO: Adapt for clion and webstorm!


CANDIDATES = [
    # Toolbox installation
    "jetbrains-idea.desktop",
    # Snap installation
    "intellij-idea-ultimate_intellij-idea-ultimate.desktop",
]


Project = namedtuple('Project', 'name path')


def get_config_home():
    return Path(os.environ.get('XDG_CONFIG_HOME', Path.home() / '.config'))


def get_data_home():
    return Path(os.environ.get('XDG_DATA_HOME', Path.home() / '.local' / 'share'))


def get_recent_file():
    return get_data_home() / 'rofi' / 'idea-recent-projects.json'


def read_recent_entries():
    try:
        return json.loads(get_recent_file().read_text())
    except FileNotFoundError:
        return {}


def write_recent_entries(entries):
    target = get_recent_file()
    target.parent.mkdir(parents=True, exist_ok=True)
    target.write_text(json.dumps(entries))


def find_idea():
    for candidate in CANDIDATES:
        try:
            return Gio.DesktopAppInfo.new(candidate)
        except TypeError:
            # For whatever reason pygobject raises a type error if new returns NULL
            continue
    else:
        return None


def latest_config_file():
    candidates = sorted(
        (get_config_home() / 'JetBrains').glob('IntelliJIdea*'),
        key=lambda p: p.name,
        reverse=True)
    if candidates:
        return candidates[0] / 'options' / 'recentProjects.xml'
    else:
        return None


def read_project(directory):
    namefile = directory.expanduser() / '.idea' / '.name'
    try:
        name = namefile.read_text(encoding='utf-8').strip()
    except FileNotFoundError:
        name = directory.name
    return Project(name=name, path=directory)


def read_projects(file):
    document = etree.parse(file)
    paths = (Path(el.attrib['value'].replace('$USER_HOME$', '~'))
             for el in
             document.findall('.//option[@name="recentPaths"]/list/option'))
    projects = [read_project(directory) for directory in paths if
                directory.expanduser().is_dir()]
    duplicates = [name for name, count
                  in Counter(p.name for p in projects).items()
                  if 1 < count]
    if duplicates:
        raise ValueError('Duplicate project name: {}', ', '.join(duplicates))
    return dict((p.name, p) for p in projects)


def main():
    idea = find_idea()
    config_file = latest_config_file()
    if not (idea and config_file):
        return
    projects = read_projects(config_file)
    recent = read_recent_entries()
    if len(sys.argv) == 1:
        print('\x00prompt\x1fIDEA Project')
        icon = idea.get_icon().get_file().get_path()
        sorted_by_recent = sorted(
            projects.keys(), key=lambda n: (recent.get(n, 0) * -1, n))
        for project_name in sorted_by_recent:
            print('{}\x00icon\x1f{}'.format(project_name, icon))
    else:
        print()
        name = sys.argv[1]
        path = projects[name].path
        recent[name] = time()
        write_recent_entries(recent)
        subprocess.run(['gtk-launch', idea.get_id(), path.expanduser().as_uri()],
                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


if __name__ == '__main__':
    main()
